local physics = require( "physics" )

physics.start()
physics.setGravity( 0, 25 )

local playerBullets = {}
local theGround = display.newImage( "land.png" )
theGround.x = display.contentCenterX
theGround.y = 450
theGround.id = "the ground"
physics.addBody( theGround, "static", {
    friction = 0.5,
    bounce = 0.3
    } )

local theGround2 = display.newImage( "land.png" )
theGround2.x = 1520
theGround2.y = display.contentHeight
theGround2.id = "the ground"
physics.addBody( theGround2, "static", { 
	friction = 0.5, 
    bounce = 0.3 
    } )

local leftWall = display.newRect( 0, display.contentHeight / 2, 1, 600 )
leftWall.alpha = 0.0
physics.addBody( leftWall, "static", {
    friction = 0.5,
    bounce = 0.3
    } )
local rightWall = display.newRect( 320, display.contentHeight / 2, 1, 600 )
rightWall.alpha = 0.0
physics.addBody( rightWall, "static", {
    friction = 0.5,
    bounce = 0.3
    } )


local dPad = display.newImage( "d-pad.png" )
dPad.x = 150
dPad.y = display.contentHeight -200
dPad.alpha = 0.50
dPad.id = "d-pad"
local upArrow = display.newImage( "upArrow.png" )
upArrow.x = 150
upArrow.y = display.contentHeight - 310
upArrow.id = "up arrow"
local downArrow = display.newImage( "downArrow.png" )
downArrow.x = 150
downArrow.y = display.contentHeight - 90
downArrow.id = "down arrow"
local leftArrow = display.newImage( "leftArrow.png" )
leftArrow.x =40
leftArrow.y = display.contentHeight - 200
leftArrow.id = "left arrow"
local rightArrow = display.newImage( "rightArrow.png" )
rightArrow.x = 260
rightArrow.y = display.contentHeight - 200
rightArrow.id = "right arrow"
local theCharacter = display.newImageRect( "idle.png" ,50, 100)
theCharacter.x = display.contentCenterX
theCharacter.y = display.contentCenterY
theCharacter.id = "the character"
physics.addBody( theCharacter, "dynamic", {
    density = 3.0,
    friction = 0.5,
    bounce = 0.3
    } )
theCharacter.isFixedRotation = true
local Character = display.newImageRect( "enemy.png" ,90, 150 )
Character.x = display.contentCenterX
Character.y = display.contentCenterY
Character.id = "badcharacter"
physics.addBody( Character, "dynamic", {
    density = 3.0,
    friction = 0.5,
    bounce = 0.3
    } )
local jumpButton = display.newImageRect( "jumpButton.png" ,75,75)
jumpButton.x = 150
jumpButton.y = display.contentHeight - 400
jumpButton.id = "jump button"
jumpButton.alpha = 0.5
local shootButton = display.newImageRect( "jumpButton.png" ,75,75)
shootButton.x = 150
shootButton.y = display.contentHeight - 200
shootButton.id = "shoot button"
shootButton.alpha = 0.5
local function characterCollision( self, event )
 
    if ( event.phase == "began" ) then
        print("collision began")
 
    elseif ( event.phase == "ended" ) then
        print( "collision ended")
    end
end
function checkPlayerBulletsOutOfBounds()
    local bulletCounter
    if #playerBullets > 0 then
        for bulletCounter = #playerBullets, 1 ,-1 do
            if playerBullets[bulletCounter].x > display.contentWidth+1000 then
                playerBullets[bulletCounter]:removeSelf()
                playerBullets[bulletCounter] = nil
                table.remove(playerBullets, bulletCounter)
                print("remove bullet")
            end
        end
    end
end
function upArrow:touch( event )
    if ( event.phase == "ended" ) then

        transition.moveBy( theCharacter, {
         x = 0,
         y = -100,
         time = 100
         } )
    end

    return true
end

function downArrow:touch( event )
    if ( event.phase == "ended" ) then

        transition.moveBy( theCharacter, {
         x = 0,
         y = 50,
         time = 100
         } )
    end

    return true
end

function leftArrow:touch( event )
    if ( event.phase == "ended" ) then

        transition.moveBy( theCharacter, {
         x = -50,
         y = 0,
         time = 100
         } )
    end

    return true
end

function rightArrow:touch( event )
    if ( event.phase == "ended" ) then

        transition.moveBy( theCharacter, {
         x = 50,
         y = 0,
         time = 100
         } )
    end

    return true
end
function checkCharacterPosition( event )
    if theCharacter.y > display.contentHeight + 500 then
        theCharacter.x = display.contentCenterX
        theCharacter.y = display.contentCenterY
    end
end
function jumpButton:touch( event )
    if ( event.phase == "ended" ) then

        theCharacter:setLinearVelocity( 0, -750 )
    end

    return true
end
function shootButton:touch( event )
    if ( event.phase == "began" ) then

        local aSingleBullet = display.newImageRect( "Kunai.png",50,15 )
        aSingleBullet.x = theCharacter.x
        aSingleBullet.y = theCharacter.y
        physics.addBody( aSingleBullet, 'dynamic' )
        aSingleBullet.isBullet = true
        aSingleBullet.gravityScale = 0
        aSingleBullet.id = "bullet"
        aSingleBullet:setLinearVelocity( 1500, 0 )

        table.insert(playerBullets,aSingleBullet)

        print("# of bullet: " .. tostring(#playerBullets))
    end
    return true
end
local function onCollision( event )
 
    if ( event.phase == "began" ) then
 
        local obj1 = event.object1
        local obj2 = event.object2

        local whereCollisonOccurredX = obj1.x
        local whereCollisonOccurredY = obj1.y

        if ( ( obj1.id == "badcharacter" and obj2.id == "bullet" ) or
             ( obj1.id == "bullet" and obj2.id == "badcharacter" ) ) then
    
             local bulletCounter = nil
    
            for bulletCounter = #playerBullets, 1, -1 do
                if ( playerBullets[bulletCounter] == obj1 or playerBullets[bulletCounter] == obj2 ) then
                    playerBullets[bulletCounter]:removeSelf()
                    playerBullets[bulletCounter] = nil
                    table.remove( playerBullets, bulletCounter )
                    break
                end
            end
           
            local emitterParams = {
                startColorAlpha = 1,
                startParticleSizeVariance = 250,
                startColorGreen = 0.3031555,
                yCoordFlipped = -1,
                blendFuncSource = 770,
                rotatePerSecondVariance = 153.95,
                particleLifespan = 0.7237,
                tangentialAcceleration = -1440.74,
                finishColorBlue = 0.3699196,
                finishColorGreen = 0.5443883,
                blendFuncDestination = 1,
                startParticleSize = 400.95,
                startColorRed = 0.8373094,
                textureFileName = "fire.png",
                startColorVarianceAlpha = 1,
                maxParticles = 256,
                finishParticleSize = 540,
                duration = 0.25,
                finishColorRed = 1,
                maxRadiusVariance = 72.63,
                finishParticleSizeVariance = 250,
                gravityy = -671.05,
                speedVariance = 90.79,
                tangentialAccelVariance = -420.11,
                angleVariance = -142.62,
                angle = -244.11
            }
            local emitter = display.newEmitter( emitterParams )
            emitter.x = whereCollisonOccurredX
            emitter.y = whereCollisonOccurredY
        end
    end
end

upArrow:addEventListener( "touch", upArrow )
downArrow:addEventListener( "touch", downArrow )
leftArrow:addEventListener( "touch", leftArrow )
rightArrow:addEventListener( "touch", rightArrow )
jumpButton:addEventListener( "touch", jumpButton )
Runtime:addEventListener( "enterFrame", checkCharacterPosition )

shootButton:addEventListener( "touch", shootButton )
Runtime:addEventListener( "collision", onCollision )
Runtime:addEventListener( "enterFrame", checkPlayerBulletsOutOfBounds )
